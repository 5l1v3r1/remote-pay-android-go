/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

package com.clover.remote.client.messages;

import com.clover.common2.payments.PayIntent;

@SuppressWarnings(value="unused")
public class SaleRequest extends TransactionRequest {

  private Long tippableAmount = null;
  private Long tipAmount = null;
  private Boolean disableCashback = null;
  private Boolean disableTipOnScreen = null;
  private Long taxAmount = null;
  private Boolean allowOfflinePayment = null;
  private Boolean approveOfflinePaymentWithoutPrompt = null;


  public SaleRequest(long amount, String externalId) {
    super(amount, externalId);
  }
  /**
  * Set the field value
  * Total amount used when calculating tips
  *
  */
  public void setTippableAmount(Long tippableAmount) {
    this.tippableAmount = tippableAmount;
  }

  /**
  * Get the field value
  * Total amount used when calculating tips
  */
  public Long getTippableAmount() {
    return this.tippableAmount;
  }  
  /**
  * Set the field value
  * Included tip
  *
  */
  public void setTipAmount(Long tipAmount) {
    this.tipAmount = tipAmount;
  }

  /**
  * Get the field value
  * Included tip
  */
  public Long getTipAmount() {
    return this.tipAmount;
  }  
  /**
  * Set the field value
  * Do not allow cash back
  *
  */
  public void setDisableCashback(Boolean disableCashback) {
    this.disableCashback = disableCashback;
  }

  /**
  * Get the field value
  * Do not allow cash back
  */
  public Boolean getDisableCashback() {
    return this.disableCashback;
  }  
  /**
  * Set the field value
  * If true, the tip screen will not be displayed on the device, even if the merchant is configured for tips on screen
  *
  */
  public void setDisableTipOnScreen(Boolean disableTipOnScreen) {
    this.disableTipOnScreen = disableTipOnScreen;
  }

  /**
  * Get the field value
  * If true, the tip screen will not be displayed on the device, even if the merchant is configured for tips on screen
  */
  public Boolean getDisableTipOnScreen() {
    return this.disableTipOnScreen;
  }  
  /**
  * Set the field value
  * Amount paid in tips
  *
  */
  public void setTaxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
  }

  /**
  * Get the field value
  * Amount paid in tips
  */
  public Long getTaxAmount() {
    return this.taxAmount;
  }  
  /**
  * Set the field value
  * If true then offline payments can be accepted
  *
  */
  public void setAllowOfflinePayment(Boolean allowOfflinePayment) {
    this.allowOfflinePayment = allowOfflinePayment;
  }

  /**
  * Get the field value
  * If true then offline payments can be accepted
  */
  public Boolean getAllowOfflinePayment() {
    return this.allowOfflinePayment;
  }  
  /**
  * Set the field value
  * If true then offline payments will be approved without a prompt
  *
  */
  public void setApproveOfflinePaymentWithoutPrompt(Boolean approveOfflinePaymentWithoutPrompt) {
    this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
  }

  /**
  * Get the field value
  * If true then offline payments will be approved without a prompt
  */
  public Boolean getApproveOfflinePaymentWithoutPrompt() {
    return this.approveOfflinePaymentWithoutPrompt;
  }

  @Override public PayIntent.TransactionType getType() {
    return PayIntent.TransactionType.PAYMENT;
  }
}
